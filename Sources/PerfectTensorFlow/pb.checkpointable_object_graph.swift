// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tensorflow/contrib/eager/proto/checkpointable_object_graph.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Tensorflow_Contrib_Eager_CheckpointableObjectGraph: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CheckpointableObjectGraph"

  public var nodes: [Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Object: SwiftProtobuf.Message {
    public static let protoMessageName: String = Tensorflow_Contrib_Eager_CheckpointableObjectGraph.protoMessageName + ".Object"

    /// Objects which this object depends on.
    public var children: [Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.ObjectReference] = []

    /// Non-slot variables owned by this object.
    public var variables: [Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.VariableReference] = []

    /// Slot variables owned by this object.
    public var slotVariables: [Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.SlotVariableReference] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct ObjectReference: SwiftProtobuf.Message {
      public static let protoMessageName: String = Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.protoMessageName + ".ObjectReference"

      /// An index into `CheckpointableObjectGraph.nodes`, indicating the object
      /// being referenced.
      public var nodeID: Int32 = 0

      /// A numeric identifier for this object within its parent.
      public var localUid: Int32 = 0

      /// A user-provided name for the edge. May be blank/omitted, in which case
      /// there is no explicitly provided local name; fall back on local_uid.
      public var localName: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularInt32Field(value: &self.nodeID)
          case 2: try decoder.decodeSingularInt32Field(value: &self.localUid)
          case 3: try decoder.decodeSingularStringField(value: &self.localName)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.nodeID != 0 {
          try visitor.visitSingularInt32Field(value: self.nodeID, fieldNumber: 1)
        }
        if self.localUid != 0 {
          try visitor.visitSingularInt32Field(value: self.localUid, fieldNumber: 2)
        }
        if !self.localName.isEmpty {
          try visitor.visitSingularStringField(value: self.localName, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    public struct VariableReference: SwiftProtobuf.Message {
      public static let protoMessageName: String = Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.protoMessageName + ".VariableReference"

      /// A name for the variable which is unique within the object which owns
      /// it. Does not include a name_scope or variable_scope prefix.
      public var localName: String = String()

      /// The full name of the variable. Used to allow name-based loading of
      /// checkpoints which were saved using an object-based API.
      public var fullName: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularStringField(value: &self.localName)
          case 2: try decoder.decodeSingularStringField(value: &self.fullName)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.localName.isEmpty {
          try visitor.visitSingularStringField(value: self.localName, fieldNumber: 1)
        }
        if !self.fullName.isEmpty {
          try visitor.visitSingularStringField(value: self.fullName, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    public struct SlotVariableReference: SwiftProtobuf.Message {
      public static let protoMessageName: String = Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.protoMessageName + ".SlotVariableReference"

      /// An index into `CheckpointableObjectGraph.nodes`, indicating the object
      /// which created the variable that this variable is slotting for.
      public var originalVariableNodeID: Int32 = 0

      /// The local name of the variable being slotted for within the object that
      /// owns it.
      public var originalVariableLocalName: String = String()

      /// The name of the slot (e.g. "m"/"v").
      public var slotName: String = String()

      /// The full name of the slot variable. Used to allow name-based loading of
      /// checkpoints which were saved using an object-based API.
      public var fullName: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularInt32Field(value: &self.originalVariableNodeID)
          case 2: try decoder.decodeSingularStringField(value: &self.originalVariableLocalName)
          case 3: try decoder.decodeSingularStringField(value: &self.slotName)
          case 4: try decoder.decodeSingularStringField(value: &self.fullName)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.originalVariableNodeID != 0 {
          try visitor.visitSingularInt32Field(value: self.originalVariableNodeID, fieldNumber: 1)
        }
        if !self.originalVariableLocalName.isEmpty {
          try visitor.visitSingularStringField(value: self.originalVariableLocalName, fieldNumber: 2)
        }
        if !self.slotName.isEmpty {
          try visitor.visitSingularStringField(value: self.slotName, fieldNumber: 3)
        }
        if !self.fullName.isEmpty {
          try visitor.visitSingularStringField(value: self.fullName, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &self.children)
        case 2: try decoder.decodeRepeatedMessageField(value: &self.variables)
        case 3: try decoder.decodeRepeatedMessageField(value: &self.slotVariables)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.children.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 1)
      }
      if !self.variables.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.variables, fieldNumber: 2)
      }
      if !self.slotVariables.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.slotVariables, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nodes)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tensorflow.contrib.eager"

extension Tensorflow_Contrib_Eager_CheckpointableObjectGraph: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nodes"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Contrib_Eager_CheckpointableObjectGraph) -> Bool {
    if self.nodes != other.nodes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "children"),
    2: .same(proto: "variables"),
    3: .standard(proto: "slot_variables"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object) -> Bool {
    if self.children != other.children {return false}
    if self.variables != other.variables {return false}
    if self.slotVariables != other.slotVariables {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.ObjectReference: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_id"),
    2: .standard(proto: "local_uid"),
    3: .standard(proto: "local_name"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.ObjectReference) -> Bool {
    if self.nodeID != other.nodeID {return false}
    if self.localUid != other.localUid {return false}
    if self.localName != other.localName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.VariableReference: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "local_name"),
    2: .standard(proto: "full_name"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.VariableReference) -> Bool {
    if self.localName != other.localName {return false}
    if self.fullName != other.fullName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.SlotVariableReference: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_variable_node_id"),
    2: .standard(proto: "original_variable_local_name"),
    3: .standard(proto: "slot_name"),
    4: .standard(proto: "full_name"),
  ]

  public func _protobuf_generated_isEqualTo(other: Tensorflow_Contrib_Eager_CheckpointableObjectGraph.Object.SlotVariableReference) -> Bool {
    if self.originalVariableNodeID != other.originalVariableNodeID {return false}
    if self.originalVariableLocalName != other.originalVariableLocalName {return false}
    if self.slotName != other.slotName {return false}
    if self.fullName != other.fullName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
